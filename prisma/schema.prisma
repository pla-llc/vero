generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  
  sessions      Session[]
  accounts      Account[]
  wallet        Wallet?
  savedWallets  SavedWallet[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Wallet {
  id          String   @id @default(cuid())
  publicKey   String   @unique
  privateKey  String   // Encrypted in real-world applications
  mnemonic    String   // Encrypted in real-world applications
  isActivated Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallet")
}

model SavedWallet {
  id      String @id @default(cuid())
  label   String
  address String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("saved_wallet")
}

model Flow {
  id String @id @default(cuid())

  name String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  triggeredAt DateTime?

  nodes String @default("{}")
  viewport String @default("{}")
}

model TrackingData {
  id String @id @default(cuid())

  coints String[]
  wallets String[]

  times String[]
}